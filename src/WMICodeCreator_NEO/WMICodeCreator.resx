<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="MainMenu.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAA0EAAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFv
        ck5UAc+id5oAAA/uSURBVHja7Z0NjBbFGYBPOFAQ5KRVa61ARQwBOamIlaonrbFVqhS5ghgUr4iApig2
        acqvIKLRIqg0qNGiQmuxGilYr9UoSDXotaicUgOCCCGhUlvBiiKISHeTvebz4/vZmfed+XbS55InKt7O
        ++7szsPuzM5M1cGDB6sA4P8TKgEAAQAAAgAABAAACAAAEAAAIAAAQAAAgAAAAAEAAAIAAAQAAAgAABAA
        ACAAAEAAAIAAAAABAAACAAAEAAAIAAAQAAAgAABAAACAAAAAAQAAAgAABAAACAAAEAAAIAAAQAAAgAAA
        AAEAAAIAAAQAAAgAAAFQCQAIAAAQAAAgAABAAACAAAAAAQAAAgAABAAACAAAEAAAIAAAQAAAgAAAAAEA
        AAIAAAQAAAgAABAAACAAAEAAAIAAAAABAAACAAAEAAAIAAAQAAAgAABAAACAAAAAAQAAAgAABAAACAAA
        EAAAIAAAQAAACIBKAEAAAIAAAAABAAACAAAEAAAIAAAQAAAgAABAAACAAAAAAQAAAijCuOYDYyNmKjGy
        yvInOnaYIO53LOLVKJ73MQZxuynGjRlQpfwTlTlOMb8GYS6a12kIAjhUAEsjDirRJLjQawRx77GI11/x
        vDsYxK1XjBtzn3LjbxWxWzG/ZmE+3RRzeQQBHCqAWYoVvEVw0+0RxH3GIuYgpXPeahh3rLIAmpQF0FM5
        v60IINsCGKlYwZ9aXuTuvsUTHXON0jk3GsadrNzAPo2oVhTASOX8PkQA2RZAX+UL3tHiIg8Rxvwi4nDD
        mFOVzneOYdw7les7plZRAPO080MA2RZA+6QBaVXyKRYXeZpC3D6GMRconW+DYdxFDgQwWlEALzrIrwYB
        ZFQASSW/q1jJNj3yjynErTeM+YTS+fY3jNvooIEtyGgHYAvdEEC2BfC0YiXXW1zkdQpxpxjGfNn3CEAS
        t8lBA2tSEkBPB7nF9EUA2RbAHMVKvtbwAreJ2K8Qd5Fh3E2V6OFWiuukI9BBB2ALAxFAtgUwWrGSbza8
        wKcqxX3FMO4e3yMASdxdjhpZrYIA5jnKbQgCyLYAzlKs5PsNL/AIpbi7DGJ2qNAIQLWjBqbSERiV8YKj
        3BoQQLYF0Emxkv9geIFnK8b+asqYpyjFG2V4rsc5FMACYeM/LOI/jnKbiAAyLICkordX6FF8meIFPjdl
        zHOU4p1ueK69HAqgSSiAHg5zm4kAsi+AFUqV/I7hBd6seIGvThlzuEKs+NuJ9obneq7DRibqCFR8FSvE
        3Qgg+wKYr1TJnxhcXO2PkH6ZMu4EhVjvWtzM9Q4bmagjUHkk6JCGhwCyL4DrFCu6fcqLe4byjbY8Zdzb
        FGI9ZXEzj3UsgKsEDW2lw7yWIYDsC2CgYkV3T3lxG5RvtPUp4y5UiHW7xc08xbEA5mewAzBmFQLIvgCO
        VazoASkv7lzlG21/mvfg6Hf+5HsEwNH55rM6gx2AMWsRQMYFkFT2TqWKvjTlxX3Gwc12coq4r/keAUji
        /sZxQ/skonXGOgCt14lAAP4F8JJSRY9PeXG3O7jZLkkR9z3fIwCKTx7l6J2xDkCjj7QQQGUF8KBSRc9I
        cWFrHN1sP0vxvvu57xGAJPZfPQjA5tVkpeu8EEAYApioVNH3priwdY5utgc8fI233PJmfseDAOYb5uS6
        A7CFTggg+wK4UKmin0hxYcdXosc5HitXiHGr5c3so6GtNsyph4ecYroigOwLoIuvm1BxRZ583isT9wcK
        MUZa3MhtPDU0o47A6Hcv85TXaQgg+wKIHwc/VqjojSku7CqHN9tRJeKOqsQCF9ExX/PU0Iw6AuPvGTzl
        dB4CyLgAkgpfo1DRu1Nc2J0Ob7YzSsT9hbDsAxFHWNzIvT0KYJRBXs95yulHCCAMASxWqux2JS7q8Y5v
        titKxL5LWPYmyxv5PI8CmG+Q105POV2FAMIQwCSlyv5miYt6geObbVaJ2Esq8V17dNyPPQpgdcqcunrM
        6QYEEIYAhihV9lklLuqNjm+2xx2uemM7AjDOY2NL1REYP5Z7zGkGAghDAFrDQpeUuKgPOb7ZmkvE3uB7
        BMDTRCDjjsDod27ymM9dCCAMAbSO+EyhsseWuKhNrv8GLBF7l+8RAE8TgfL5SYqcnvSYz8MIIAABJJX+
        pqt1+hWHGstxfIHYh1diBEBhItA2F2sEGn6ZuDdih6+1IhFAZQXwuEJl3+PhghqtDxj92YnCMjcIvmm3
        nQj0meXOSU1l8ulo+lqVYFt3LyCAcAQwU6GylxQp+4eeBNBQIPaZwjKXCgRgOxFop+UW7iXXCIz+39mG
        5T0qFMBaBBCOADQ+D32uSNmmw4xvWO5Xd4sD+cwSCMB2ItDWiCu1+yssloCbJBTAFgQQjgA0JsysK1K2
        6YdG8e+/pfEEEv3ZNcJzGiEQgO1EoDcEG7dcUyKfBwzLGiwUwC4EEI4A2iYdXpLK3lGk7NcNy5lmuXLQ
        GgdDcbWWN7FkItDqiM7auzRZvJKcJBTAQQQQiACSipduYrm/yBDjp6a7DVsuVLJLeQZivIhIW8ubWPLp
        87NJGR9oSDDnOpjsjfhxMnrTLLwnOiGAcASwXHsRCMuPjOLNQ2dYxj9acXRDMgIg2QD1yaSM1RbH7ouf
        Pgrk09NmREFBAF0QQDgC0Jgm2l34mfGB5HXkasv4/RXXPJSMAHxXuqlG/DivUQeWnbz3KwmgFgGEIwCN
        efNn5pU5zfD4zcLJQ5fnxX+7QiMAw6TfU0T//KnWAq0WG6OMS477i/B+qEMA4Qigv0KFX5RXpukHLU9b
        PrK2MF1xSS7JCIBk+bNbhdOJHyyQT6PNU4TCIi6DEUA4AuigvXSWxSfGc5PjjpTuSRd/wis8lz4CAUwV
        xJ2clGE7ElBoNGSLYednu+Q46T4OoxBAIAJIKn+bsMJvyCmr2mKS0RjhJJ6XlOa+7y/UmWZwE0sWIZmQ
        U47NPgpf+iLQYkPWdTnHSrdyvx4BhCUAqfFvEfQ8f+mdMb4RbSbR5Bz/bcF5vFUl+ImO/63GJ83xkKB0
        anC8o5Hph1g5xy4V3g83IYCwBHC31v4AlguNHCN4b20ZRahOjr/Y5TLnZerxz4LYQxRGZkbmlHGF4Ank
        EeH9MA8BhCUA6aezv88pa7LpJJi8XGyHwboqnMtMoQD+Joj9vZxyhluWMSenjFttV3aK/v1XwvvhIQQQ
        lgCku/c8n1PWIsNjX1bqSKuzFFAuw4QC2CyI3U9htabnLN/j476Pw3OOvcP3bEoEUFkBdBZW+BuCvwUf
        ysvlKskKwfF4us8NN/Ny3y2I3SNvMRWbocz3c8pYbzuCoLCE2EoEEJAAkgvwvqDCt+eU85Fkk0/BOPgU
        4WrA0hGAtsKb9ti88l60LKezxXJv9+bFlu4d+ToCCE8Ako8/9iZlnGBx7IVKq/m0fMa6okIjANI9EI7I
        K2+e7auQxVBoQ17sMcJzeRcBhCeA+4SVHn/EM1A6cST671bJ5BbTchqT49+q0AiAZCLQvgLlXW67SGvc
        oWh4TC+l2AU7dhFAGAK4XljpPSwm83xUJJeNto+dglcZ6QiAZCLQvwqUd7JlWXcbjoTE/Rat8mJL9xH4
        AgGEJ4DzhZU+wGLo6RXF8fQdybuvbf71QgFIJgJtLlKmzdoAzxr24q8sEHegQiM8CgGEJYAThJV+afw9
        gHQCi2BBj/iz128I8u8pFMB47U4zyy80txnuA3B7gbhnKDTCLgggIAEozKKLt8R6VeOb8XhkwDKHQYIl
        uauFApBMBFpVpMybLcv7p8HvDi0Qt5dCI6xFAOEJQLKTz/Rx5jvQnlMkj4sFOdgc92aV8Ec4EWhZkTIv
        8rCs+nEF4nZRKLcOAYQngIcFlf47i0f2jkXy6G67WajlcY8pCEAyEWhxkTKPdtz4NxWJW6NQ9mAEEJ4A
        fi4Z+jH8/Y0l8rDdt/BDX7PXlGdU3lui3PUOBbCoSMzDFMoehQDCE8DFHh45U/2tG/3/v3vMZaiCANYI
        4t9RolyXOyyX2tj1E2HZExBAeAI4yWOjm1Qml6Uec+mpIIAtgvjTSpQ71uF59yoRd4ew7OkIIDwBtLJY
        z9+WC8rkMstTHuIRgCRfyU7INzj6wrDcK9thJeJK94uYiwACE4DSktBpqSmTxwhPeWiMAEi3I28o0x+y
        28F5N5Y5p7XC8hcigDAF8KiHRrcpRR61ngSwREEAXxfmUF+m/OcdnPdkh5PD/rfRCQIITwA3eWh0j6ac
        Xvu5h1ymKgigjzCH75cpf7aD864rE/MpYfkrEECYAhjqodHdmDKXDR5yGaIgAPE8ijLlD3LQ79HO8ZPg
        awggTAH09tDozk6Zi4+RgB4KAhguzOHUMuV/Rfmcm1Kc0/3CGJsRQJgCaJOsjuOqwcWP9UemzMX1SMDe
        uJNNQQDXCvPoliLG24rnPTdFvDuFMT5AAAEKwMPXZ28a5OF6JKC5SuHHYi9EoxGRJMYixfMemiLeDGGM
        AwggXAG4fPT+tUEetZXujEyZ5z3CPFp7eMooOQGoQLyJCnE6IoAwBTDbYaMbb5CH65GAqUoCkHSY7UkZ
        o6+vIdgk3miFWCcigDAFMNJho+tnmMuGLI8AKEwEej9ljNbCrw1LTgBSXuHIeKNVBJAtAXzLUYPbZ7r0
        tuPXkR5KAljjo7c8Xr7L5QQgB2sRnIsAwhSA6c6yasNPHkcCVEYAFCYCNRvEuc3lBKC8WOcoxLoEAQQo
        AIWbuhgLLPJwNRLwepXSj/DRfJVBHOl07ZITgPJinaZQx1cigHAF0Oig0Y2yyMPVSMBipcYvnQj0R4NY
        x7qcAOSgQU5AAOEKYK7P+ecVGAmYpCQA6USgJYbx3nE1AcjB14fTEUC4Ahit3OAO2YCiwiMBg5UEIJ0I
        9IBhPMnag3WG4nX+xSECyK4ABig3uFWCRuZiJOAkJQGc76uRJPGuczUBqECsfcJzW4gAwhVAjXKDmyNo
        ZNojAXtsn0YK5HaZMJeZhvFO9zgC829fawIggIwJILko/1C8KMMFjWxEhkcArhPmMtEwXnX8AZMF/SzO
        bavw3J5HAGELYGUWHrkdjAQsVhTAdGEuY6oy+qOwPNyrCCAjAgAABAAACAAAEAAAIAAAQAAAgAAAAAEA
        AAIAAAQAAAgAABAAACAAAEAAAIAAAAABAAACAAAEAAAIAAAQAAAgAABAAAAIAAAQAAAgAABAAACAAAAA
        AQAAAgAABAAACAAAEAAAIAAAQAAAgAAAAAEAAAIAAAQAAAgAABAAACAAAEAAAIAAAAABAAACAAAEAAAI
        AAAQAAAgAABAAACAAAAAAQAAAgAABAAACAAAEAAAIAAAQAAAgAAAEAAAIAAAQAAAgAAAAAEAAAIAAAQA
        AAgAABAAACAAAEAAAIAAAAABAAACAAAEAAAIAAAQAAAgAABAAACAAAAAAQAAAgAABAAACAAAEAAAIAAA
        QAAAgAAAwJb/AgLEj/clQfSZAAAAAElFTkSuQmCC
</value>
  </data>
</root>